name: iOS Tests & Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    
    strategy:
      matrix:
        xcode: ['15.0']
        device: ['iPhone 16', 'iPhone 15 Pro']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_${{ matrix.xcode }}.app
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Show available simulators
      run: xcrun simctl list devices
      
    - name: Build and test
      run: |
        xcodebuild test \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -destination 'platform=iOS Simulator,name=${{ matrix.device }},OS=latest' \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults.xcresult \
          | xcpretty
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.device }}
        path: TestResults.xcresult
        
    - name: Generate coverage report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.device }}
        path: coverage.json
        
  ui-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run UI tests
      run: |
        xcodebuild test \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -only-testing:CheffyUITests \
          -resultBundlePath UITestResults.xcresult \
          | xcpretty
          
    - name: Upload UI test results
      uses: actions/upload-artifact@v4
      with:
        name: ui-test-results
        path: UITestResults.xcresult
        
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Build for release
      run: |
        xcodebuild build \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          | xcpretty

  fastlane-test:
    runs-on: macos-latest
    needs: [test, ui-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install Fastlane
      run: |
        gem install bundler
        bundle install
        
    - name: Setup certificates
      run: |
        bundle exec fastlane setup_certificates
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        
    - name: Run Fastlane tests
      run: |
        bundle exec fastlane test
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

  deploy-testflight:
    runs-on: macos-latest
    needs: [fastlane-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        
    - name: Install Fastlane
      run: |
        gem install bundler
        bundle install
        
    - name: Setup certificates
      run: |
        bundle exec fastlane setup_certificates
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        
    - name: Deploy to TestFlight
      run: |
        bundle exec fastlane beta
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }} 