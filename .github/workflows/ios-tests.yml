name: iOS Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    
    strategy:
      matrix:
        xcode: ['15.0']
        device: ['iPhone 16', 'iPhone 15 Pro']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_${{ matrix.xcode }}.app
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Show available simulators
      run: xcrun simctl list devices
      
    - name: Build and test
      run: |
        xcodebuild test \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -destination 'platform=iOS Simulator,name=${{ matrix.device }},OS=latest' \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults.xcresult \
          | xcpretty
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.device }}
        path: TestResults.xcresult
        
    - name: Generate coverage report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.device }}
        path: coverage.json
        
  ui-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run UI tests
      run: |
        xcodebuild test \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -only-testing:CheffyUITests \
          -resultBundlePath UITestResults.xcresult \
          | xcpretty
          
    - name: Upload UI test results
      uses: actions/upload-artifact@v4
      with:
        name: ui-test-results
        path: UITestResults.xcresult
        
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Build for release
      run: |
        xcodebuild build \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          | xcpretty
          
    - name: Build for simulator
      run: |
        xcodebuild build \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          | xcpretty
          
  lint:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging
        
  security:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets
      run: |
        # Check for hardcoded API keys
        if grep -r "AIzaSy" . --exclude-dir=.git --exclude-dir=build; then
          echo "⚠️  Warning: Potential hardcoded API keys found"
        fi
        
        # Check for hardcoded passwords
        if grep -r "password" . --exclude-dir=.git --exclude-dir=build --ignore-case; then
          echo "⚠️  Warning: Potential hardcoded passwords found"
        fi
        
  performance:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run performance tests
      run: |
        xcodebuild test \
          -scheme Cheffy \
          -project Cheffy.xcodeproj \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -only-testing:CheffyTests/testRecipeGenerationPerformance \
          | xcpretty
          
  report:
    runs-on: macos-latest
    needs: [test, ui-test, build, lint, security, performance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-iPhone 16
        
    - name: Generate test report
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ UI tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code linting passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Performance tests passed" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## 🎯 Test Results\n\n✅ All tests passed successfully!\n\n- **Unit Tests**: ✅ Passed\n- **UI Tests**: ✅ Passed\n- **Build**: ✅ Successful\n- **Linting**: ✅ Passed\n- **Security**: ✅ Passed\n- **Performance**: ✅ Passed\n\n🚀 Ready for merge!'
          }) 